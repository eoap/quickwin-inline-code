{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickwin - An Application Package with inline Python code","text":"<p>This documentation describes a simple Python application <code>app.py</code>, including a unit test, as a demonstration of a \"real\" yet very simple Python EO application.</p> <p>Using CWL's InitialWorkDirRequirement, a requirement that defines a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool, the Python script <code>app.py</code> is staged and executed in a container.</p> <p>For easing the development of the Python script <code>app.py</code>, its content is added to a template named <code>workflow.cwl.template</code> by this repository Github actions.</p> <p>The CWL document generated is available in the releases section.</p>"},{"location":"background/explanation/","title":"Application Package - Background","text":"<p>The Application Package defines a workflow for detecting water bodies based on Normalized Difference Water Index (NDWI) and Otsu threshold using Sentinel-2 data.</p> <p>The key components of this CWL document are:</p> <ul> <li>Name: Water bodies detection based on NDWI and the Otsu threshold.</li> <li>Description: Workflow for detecting water bodies based on NDWI and Otsu threshold applied to a single Sentinel-2 Cloud-Optimized GeoTIFF (COG) SpatioTemporal Asset Catalog (STAC) item.</li> <li> <p>Inputs:</p> <ul> <li><code>aoi</code>: Area of interest as a bounding box.</li> <li><code>epsg</code>: EPSG code (default: \"EPSG:4326\").</li> <li><code>bands</code>: Bands used for NDWI (default: [\"green\", \"nir\"]).</li> <li><code>item</code>: Reference to a STAC item.</li> </ul> </li> <li> <p>Outputs:</p> <ul> <li><code>stac_catalog</code>: Output directory containing the STAC catalog.</li> </ul> </li> <li> <p>Steps:</p> <ul> <li><code>node_detect</code>: Executes the detect-water-body tool with specified inputs and produces a STAC catalog in the output directory.</li> </ul> </li> <li> <p>Tool: detect-water-body:</p> <ul> <li>A CommandLineTool written in Python that uses various libraries such as rasterio, skimage, pyproj, shapely and loguru.</li> <li>It performs operations like cropping, thresholding, and creating a STAC catalog for the detected water bodies.</li> <li>It takes inputs like STAC item URL, area of interest, EPSG code, and band names.</li> </ul> </li> <li> <p>Tool Requirements:</p> <ul> <li>Uses Docker.</li> <li>Specifies resource requirements (<code>coresMax: 1</code>, <code>ramMax: 512</code>).</li> <li>Sets up initial working directory with an entry script (<code>app.py</code>).</li> </ul> </li> <li> <p>Execution:</p> <ul> <li>The workflow runs the detect-water-body tool with specified inputs.</li> <li>Generates a STAC catalog with the detected water bodies.</li> <li>Cleans up temporary files after completion.</li> </ul> </li> </ul>"},{"location":"exec/run/","title":"Run the Application Package","text":"<p>The new <code>workflow.cwl</code> can be executed with:</p> <pre><code>cwltool workflow.cwl params.yaml\n</code></pre> <p>Where <code>params.yaml</code> contains:</p> <pre><code>item: \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_10TFK_20210713_0_L2A\"\naoi: \"-121.399,39.834,-120.74,40.472\"\nepsg: \"EPSG:4326\"\n</code></pre>"},{"location":"exec/run_release/","title":"Run the released Application Package","text":"<p>The release 1.0.0 contains the released Application Package include the update docker reference published in the Github container registry.</p> <p>Run the released Application Package with:</p> <pre><code>cwltool \\\n    https://github.com/eoap/quickwin-inline-code/releases/download/1.0.0/app-water-body-inline-code.1.0.0.cwl \\\n    params.yaml \n</code></pre>"},{"location":"generate/generate_AppPackage/","title":"Generate the Application Package with the inline code","text":"<p>Update the Application Package template <code>workflow.cwl.template</code> with the Python <code>app.py</code> as the inline code to run:</p> <pre><code>content=`cat app.py` yq eval '.$graph[1].requirements.InitialWorkDirRequirement.listing[0].entry=strenv(content)' workflow.cwl.template &gt; workflow.cwl\n</code></pre> <p>Here's a breakdown of the command:</p> <ul> <li> <p><code>cat app.py</code>: This command outputs the contents of the <code>app.py</code> file.</p> </li> <li> <p><code>yq eval '.$graph[1].requirements.InitialWorkDirRequirement.listing[0].entry=strenv(content)' workflow.cwl.template</code>: This command uses yq to evaluate a YAML expression on the <code>workflow.cwl.template</code> file. The expression modifies the entry at a specific path in the CWL <code>InitialWorkDirRequirement</code>, setting it to the content of <code>app.py</code>.</p> </li> <li> <p><code>&gt; workflow.cwl</code>: This part of the command redirects the modified output to a new file named <code>workflow.cwl</code>.</p> </li> </ul>"}]}