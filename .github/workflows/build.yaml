name: build
on:
  push:
    branches:
    - main

jobs:
  cwl-pack-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - run: pip install cwltool
    - run: content=`cat app.py` yq eval '.$graph[1].requirements.InitialWorkDirRequirement.listing[0].entry=strenv(content)' workflow.cwl.template > workflow.cwl
    - run: cwltool --validate workflow.cwl

  version:
    needs: cwl-pack-validate

    runs-on: ubuntu-latest

    outputs:

      app-version: ${{ steps.set-version.outputs.version }}

    steps:
    - uses: actions/checkout@v2
    - run: echo "APP_VERSION=$(cat codemeta.json | jq -r .version )" >> $GITHUB_ENV
    - run: echo app version is $APP_VERSION
    - id: set-version
      run: echo "::set-output name=version::$APP_VERSION"

  container-build:

    needs: version

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: echo version ${{needs.version.outputs.app-version}}
    - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: build & push image
      run: |
        IMAGE_ID=ghcr.io/eoap/quickwin-inline-code/python-inline-code
        docker build . --file Dockerfile --tag $IMAGE_ID:${{needs.version.outputs.app-version}}
        docker push $IMAGE_ID:${{needs.version.outputs.app-version}}

  create-release:

    needs:
    - container-build
    - version

    runs-on: ubuntu-latest

    outputs:

      upload_url: ${{ steps.set-upload-url.outputs.upload_url }}

    steps:
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{needs.version.outputs.app-version}}
        tag_name: ${{needs.version.outputs.app-version}}
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - id: set-upload-url
      run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  publish-artifacts:

    needs:
    - create-release
    - version

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: content=`cat app.py` yq eval '.$graph[1].requirements.InitialWorkDirRequirement.listing[0].entry=strenv(content)' workflow.cwl.template > workflow.cwl
    - run: |
        tag="ghcr.io/eoap/quickwin-inline-code/python-inline-code:${{needs.version.outputs.app-version}}"
        docker pull ${tag}
        shatag=$( docker inspect ${tag} | yq -r '.[0]["RepoDigests"][0]' )
        s="detect-water-body" t="${shatag}" yq -i eval '(.$graph[] | select (.id == env(s)) ).hints.DockerRequirement.dockerPull = env(t)' workflow.cwl

    - run: |
        r=$( cat codemeta.json | jq -r ".codeRepository" ) yq -i eval '."s:codeRepository" = {"URL" : env(r)}' workflow.cwl
        v="${{needs.version.outputs.app-version}}" yq -i eval '."s:softwareVersion" = env(v)' workflow.cwl
        n=$(cat codemeta.json | jq -r '(.author[0].givenName + " " + .author[0].familyName)') \
        e=$(cat codemeta.json | jq -r '.author[0].email') \
        a=$(cat codemeta.json | jq -r '.author[0].affiliation["name"]') \
        yq eval -i  '."s:author" += [{"class": "s:Person", "s.name": env(n), "s.email": env(e), "s.affiliation": env(a)}]' workflow.cwl
    - run: |
        mkdir downloads
        cp workflow.cwl downloads/app-water-body-inline-code.${{needs.version.outputs.app-version}}.cwl
    - uses: actions/upload-artifact@v2
      with:
        name: application-package
        path: downloads
    - name: upload linux artifact 1
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{needs.create-release.outputs.upload_url}}
        asset_path: downloads/app-water-body-inline-code.${{needs.version.outputs.app-version}}.cwl
        asset_name: app-water-body-inline-code.${{needs.version.outputs.app-version}}.cwl
        asset_content_type: text/yaml
